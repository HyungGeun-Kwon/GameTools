// <auto-generated />
using System;
using GameTools.Server.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameTools.Server.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818124225_AddRarityAuditTrigger")]
    partial class AddRarityAuditTrigger
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameTools.Server.Domain.Auditing.ItemAudit", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AfterJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeforeJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue("system");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("AuditId");

                    b.HasIndex("ChangedAtUtc");

                    b.HasIndex("ItemId", "ChangedAtUtc");

                    b.ToTable("ItemAudit", null, t =>
                        {
                            t.HasCheckConstraint("CK_ItemAudit_Action", "UPPER([Action]) IN ('INSERT','UPDATE','DELETE')");

                            t.HasCheckConstraint("CK_ItemAudit_After_IsJson", "([AfterJson]  IS NULL OR ISJSON([AfterJson])  = 1)");

                            t.HasCheckConstraint("CK_ItemAudit_Before_IsJson", "([BeforeJson] IS NULL OR ISJSON([BeforeJson]) = 1)");
                        });
                });

            modelBuilder.Entity("GameTools.Server.Domain.Auditing.RarityAudit", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AfterJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeforeJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSUTCDATETIME()");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasDefaultValue("system");

                    b.Property<byte>("RarityId")
                        .HasColumnType("tinyint");

                    b.HasKey("AuditId");

                    b.HasIndex("ChangedAtUtc");

                    b.HasIndex("RarityId", "ChangedAtUtc");

                    b.ToTable("RarityAudit", null, t =>
                        {
                            t.HasCheckConstraint("CK_RarityAudit_Action", "UPPER([Action]) IN ('INSERT','UPDATE','DELETE')");

                            t.HasCheckConstraint("CK_RarityAudit_After_IsJson", "([AfterJson]  IS NULL OR ISJSON([AfterJson])  = 1)");

                            t.HasCheckConstraint("CK_RarityAudit_Before_IsJson", "([BeforeJson] IS NULL OR ISJSON([BeforeJson]) = 1)");
                        });
                });

            modelBuilder.Entity("GameTools.Server.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<byte>("RarityId")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RarityId");

                    b.ToTable("Item", null, t =>
                        {
                            t.HasCheckConstraint("CK_Item_Price_NonNegative", "[Price] >= 0");
                        });
                });

            modelBuilder.Entity("GameTools.Server.Domain.Entities.Rarity", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(7)")
                        .HasDefaultValue("#A0A0A0");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ColorCode")
                        .IsUnique();

                    b.HasIndex("Grade")
                        .IsUnique();

                    b.ToTable("Rarity", null, t =>
                        {
                            t.HasCheckConstraint("CK_Rarity_ColorCode_Format", "LEN([ColorCode]) = 7 AND LEFT([ColorCode],1) = '#' AND [ColorCode] = UPPER([ColorCode]) AND [ColorCode] LIKE '#[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]'");
                        });
                });

            modelBuilder.Entity("GameTools.Server.Domain.Entities.Item", b =>
                {
                    b.HasOne("GameTools.Server.Domain.Entities.Rarity", "Rarity")
                        .WithMany("Items")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("GameTools.Server.Domain.Entities.Rarity", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
